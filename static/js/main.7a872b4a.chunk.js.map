{"version":3,"sources":["Components/ProgressBar.js","Utils/helperFunc.js","Components/QuestionAnswer.js","Components/ScoreProgress.js","Components/QuestionPlaceholder.js","App.js","serviceWorker.js","index.js"],"names":["ProgressSection","styled","div","_templateObject","ProgressFill","_templateObject2","_ref","width","ProgressBar","_ref2","react_default","a","createElement","decodeString","str","decodeURIComponent","shuffleArray","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","CategoryText","span","QuestionAnswer_templateObject","OptionButton","button","QuestionAnswer_templateObject2","isCorrect","QuestionAnswer","props","_props$question","question","handleNextQuestion","currentQuestion","saveCurrentAnswer","totalQuestion","_decodeObject","decodeObject","obj","tempObj","property","value","Array","isArray","map","correct_answer","incorrect_answers","category","difficulty","questionTitle","_useState","useState","concat","Object","toConsumableArray","_useState2","slicedToArray","options","setOptions","_useState3","selectedAnswer","isAnswered","isAnswerCorrect","_useState4","answer","setAnswer","useEffect","handleAnswerClick","e","selectedAns","target","innerText","className","renderDifficulty","slice","option","key","onClick","disabled","Fragment","Section","ScoreProgress_templateObject","ProgreeBar","ScoreProgress_templateObject2","Bar","_templateObject3","bgColor","ScoreProgress","_ref3","currentScore","maxScore","lowestScore","Placeholder","QuestionPlaceholder_templateObject","ScorePlaceholder","QuestionPlaceholder_templateObject2","QuestionPlaceholder","questionJson","questions","setQuestions","isQuizFinished","setIsQuizFinished","_useState5","_useState6","setCurrentQuestion","_useState7","_useState8","score","setScore","totalCorrectAns","filter","o","round","calculateProgress","Components_ProgressBar","window","location","reload","Components_QuestionAnswer","index","tempQuestions","objectSpread","Components_ScoreProgress","App","Components_QuestionPlaceholder","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a872b4a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ProgressSection = styled.div`\n    height: 25px;\n    width: 100%;\n`\n\nconst ProgressFill = styled.div`\n    height: inherit;\n    width: ${({ width }) => width}%;\n    background-color: #a8a2a8;\n`\n\nconst ProgressBar = ({ width }) => {\n    return (\n        <ProgressSection>\n            <ProgressFill width={width || 0} />\n        </ProgressSection>\n    )\n}\n\nexport default ProgressBar","export const decodeString = (str) => {\n    return decodeURIComponent(str)\n}\n\nexport const decodeObject = (obj) => {\n  let tempObj = {}\n  for (const property in obj) {\n    const value = obj[property]\n\n    if (typeof value === 'string')\n      tempObj[property] = decodeString(value)\n    else if(typeof value === 'object' && !Array.isArray(value))\n      tempObj[property] = decodeObject(obj[property])\n    else if(typeof value === 'object' && Array.isArray(value))\n      tempObj[property] = value.map(str => decodeString(str))\n    else\n      tempObj[property] = value\n  }\n  return tempObj\n}\n\nexport const shuffleArray = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n}","import React, { useEffect, useState } from \"react\";\nimport { decodeObject, shuffleArray } from \"../Utils/helperFunc\";\nimport styled from \"styled-components\";\n\nconst CategoryText = styled.span`\n  font-size: 14px;\n  color: grey;\n  text-align: left;\n`\n\nconst OptionButton = styled.button`\n  height: 40px;\n  width: 45%;\n  border-radius: 4px;\n  font-size: 13px;\n  font-weight: bold;\n  ${({ isCorrect }) => isCorrect && `\n    background-color: black;\n    color: #fff\n  `}\n`\n\nconst QuestionAnswer = (props) => {\n  const {\n    question = {},\n    handleNextQuestion,\n    currentQuestion,\n    saveCurrentAnswer,\n    totalQuestion\n  } = props\n\n  const {\n    correct_answer,\n    incorrect_answers,\n    category,\n    difficulty,\n    question: questionTitle\n  } = decodeObject(question)\n\n  const [options, setOptions] = useState(\n    shuffleArray([correct_answer, ...incorrect_answers]) || []\n  )\n  const [answer, setAnswer] = useState({\n    selectedAnswer: null,\n    isAnswered: false,\n    isAnswerCorrect: false\n  })\n\n  const handleNext = () => {\n    saveCurrentAnswer(currentQuestion, answer.isAnswerCorrect)\n    setAnswer({\n      selectedAnswer: null,\n      isAnswered: false,\n      isAnswerCorrect: false\n    })\n    handleNextQuestion()\n  }\n\n  useEffect(() => {\n    setOptions(\n      shuffleArray([correct_answer, ...incorrect_answers]) || []\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [question])\n\n\n  const renderDifficulty = (difficulty) => {\n    switch (difficulty) {\n      case 'easy':\n        return <span>&#9733;&#9734;&#9734;</span>\n      case 'medium':\n        return <span>&#9733;&#9733;&#9734;</span>\n      case 'hard':\n        return <span>&#9733;&#9733;&#9733;</span>\n      default:\n        return <span>&#9734;&#9734;&#9734;</span>\n    }\n  }\n\n  const handleAnswerClick = (e) => {\n    const selectedAns = e.target.innerText;\n    setAnswer({\n      selectedAnswer: selectedAns,\n      isAnswered: true,\n      isAnswerCorrect: selectedAns === correct_answer\n    })\n  }\n\n  return (\n    <div className=\"text-left\">\n      <CategoryText>{category}</CategoryText>\n      <p>{renderDifficulty(difficulty)}</p>\n      <h5>{questionTitle}</h5>\n      <div className=\"mt-5 d-grid\">\n        <div className=\"d-flex justify-content-between mb-4\">\n          {options.slice(0, 2).map((option) => (\n            <OptionButton\n              key={option}\n              onClick={handleAnswerClick}\n              disabled={answer.isAnswered && option !== answer.selectedAnswer}\n              isCorrect={answer.isAnswered && (option === correct_answer)}\n            >{option}\n            </OptionButton>\n          ))}\n        </div>\n        <div className=\"d-flex justify-content-between\">\n          {options.slice(2, 4).map((option) => (\n            <OptionButton\n              key={option}\n              onClick={handleAnswerClick}\n              isCorrect={answer.isAnswered && option === correct_answer}\n              disabled={answer.isAnswered && option !== answer.selectedAnswer}\n            >{option}\n            </OptionButton>\n          ))}\n        </div>\n        <div className=\"mt-5 text-center\">\n          {answer.isAnswered && (\n            <>\n              <h3>{answer.selectedAnswer === correct_answer ? 'Correct !' : 'Sorry !'}</h3>\n              <button className=\"btn btn-outline-secondary mt-2\" onClick={handleNext}>\n                {currentQuestion + 1 === totalQuestion ? 'Finish' : 'Next Question'}\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default QuestionAnswer","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Section = styled.div`\n  width: 75%;\n  margin: 0 auto;\n`\n\nconst ProgreeBar = styled.div`\n  position: relative;\n  height: 35px;\n  border: 1px solid #dedede;\n  width: 100%;   \n  border-radius: 4px;\n`\n\nconst Bar = styled.div`\n  position: absolute;\n  background-color: ${({ bgColor }) => bgColor};\n  width: ${({ width }) => width}%;\n  height: inherit;\n  opacity: .7;\n`\n\nconst ScoreProgress = ({ currentScore, maxScore, lowestScore }) => {\n  return (\n    <Section>\n      <div className=\"d-flex justify-content-between\">\n        <span className=\"text-left bold\">Score: {currentScore}%</span>\n        <span className=\"text-left\">Max Score: {maxScore}%</span>\n      </div>\n      <ProgreeBar>\n        <Bar width={maxScore} bgColor='lightgray' />\n        <Bar width={currentScore} bgColor='darkgrey' />\n        <Bar width={lowestScore} bgColor='black' />\n      </ProgreeBar>\n    </Section>\n  )\n}\n\nexport default ScoreProgress","import React, { useEffect, useState } from 'react'\nimport ProgressBar from './ProgressBar'\nimport QuestionAnswer from './QuestionAnswer'\nimport ScoreProgress from './ScoreProgress'\nimport styled from 'styled-components'\nimport questionJson from '../questions.json'\n\nconst Placeholder = styled.div`\n  width: 75%;\n  margin: 0 auto;\n`\n\nconst ScorePlaceholder = styled.div`\n  position: absolute;\n  bottom: 25px;\n  width: inherit;\n`\n\nconst QuestionPlaceholder = () => {\n\n  const [questions, setQuestions] = useState(questionJson)\n  const [isQuizFinished, setIsQuizFinished] = useState(false)\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [score, setScore] = useState({\n    currentScore: 0,\n    maxScore: 100,\n    lowestScore: 0\n  })\n\n  const handleNextQuestion = () => {\n    if (currentQuestion === questions.length - 1) {\n      setIsQuizFinished(true)\n    }\n    setCurrentQuestion(currentQuestion + 1)\n  }\n\n  const calculateProgress = () => {\n    const totalCorrectAns = questions.filter(o => o.isAnswerCorrect).length || 0\n    const totalQuestion = questions.length\n    const totalAttempt = currentQuestion\n    const currentScore = (totalCorrectAns / totalAttempt) * 100\n    const maxScore = ((totalCorrectAns + (totalQuestion - totalAttempt)) / totalQuestion) * 100\n    const lowestScore = (totalCorrectAns / totalQuestion) * 100\n    setScore({\n      currentScore: Math.round(currentScore) || 0,\n      maxScore: Math.round(maxScore),\n      lowestScore: Math.round(lowestScore)\n    })\n  }\n\n  const handleSaveAnswer = (index, isAnswerCorrect) => {\n    const tempQuestions = questions.slice()\n    tempQuestions[index] = {\n      ...tempQuestions[index],\n      isAnswerCorrect\n    }\n    setQuestions(tempQuestions)\n  }\n\n  useEffect(() => {\n    calculateProgress()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [questions])\n\n  return (\n    <>\n      <div>\n        <ProgressBar width={(currentQuestion / questions.length) * 100} />\n      </div>\n      <Placeholder className='p-4'>\n        {isQuizFinished && (\n          <div className='mt-5'>\n            <h4>Quiz Finished</h4>\n            <p>\n              <h5>Your score: {score.currentScore} %</h5>\n            </p>\n            <button onClick={() => window.location.reload()} className='btn btn-outline-secondary'>\n              Restart Quiz\n            </button>\n          </div>\n        )\n        }\n        {!isQuizFinished && (\n          <>\n            <h4 className='text-left'>{`Question ${currentQuestion + 1} of ${questions.length}`}</h4>\n            {\n              questions.length > 0 && (\n                <QuestionAnswer\n                  handleNextQuestion={handleNextQuestion}\n                  question={questions[currentQuestion]}\n                  currentQuestion={currentQuestion}\n                  saveCurrentAnswer={handleSaveAnswer}\n                  totalQuestion={questions.length}\n                />\n              )\n            }\n          </>\n        )}\n\n      </Placeholder>\n      <ScorePlaceholder>\n        <ScoreProgress currentScore={score.currentScore} maxScore={score.maxScore} lowestScore={score.lowestScore} />\n      </ScorePlaceholder>\n    </>\n  )\n}\n\nexport default QuestionPlaceholder","import React from 'react'\nimport QuestionPlaceholder from './Components/QuestionPlaceholder'\nimport './App.css'\n\nfunction App () {\n  return (\n    <div className='App'>\n        <div className='container w-50 vh-100 border border-secondary p-0'>\n            <QuestionPlaceholder />            \n        </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}